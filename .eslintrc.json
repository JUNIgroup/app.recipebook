{
  "env": {
    "browser": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".ts", ".tsx"]
      }
    }
  },
  "plugins": ["solid", "@typescript-eslint", "prettier", "html"],
  "extends": [
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "airbnb-base",
    "airbnb-typescript/base",
    "plugin:solid/typescript", // after airbnb
    "prettier" // must be the last entry
  ],
  "rules": {
    "prettier/prettier": "warn",
    //
    //
    // imports
    // --------------------------------------------------------------------
    // see https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/prefer-default-export.md
    // Prefer named exports to have fix import statements, if more exports will be provided.
    "import/prefer-default-export": "off",
    // see https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-extraneous-dependencies.md
    // Allow devDependencies in test files and test helper files
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": ["**/*.spec.{js,jsx,ts,tsx}", "**/*.test-helper.{js,jsx,ts,tsx}"]
      }
    ],
    //
    // typescript
    // --------------------------------------------------------------------
    // see https://typescript-eslint.io/rules/no-use-before-define/
    // see https://eslint.org/docs/latest/rules/no-use-before-define#options
    // Prefer to order functions by their usage.
    // Functions are hoisted, so they can be used before they are declared.
    "@typescript-eslint/no-use-before-define": ["error", { "functions": false }],
    // see https://typescript-eslint.io/rules/lines-between-class-members/
    // Prefer to write class members compact without empty lines.
    "@typescript-eslint/lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }]
  }
}
